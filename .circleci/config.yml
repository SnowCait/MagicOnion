version: 2.1
executors:
  dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      NUGET_XMLDOC_MODE: skip
  unity:
    docker:
      # https://hub.docker.com/r/gableroux/unity3d/tags
      - image: gableroux/unity3d:2018.3.12f1-windows
  macos:
    macos:
      xcode: 10.2.0
    environment:
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
jobs:
  # create package for Unity
  build-unity:
    executor: unity
    steps:
      - checkout
      # get activation file, if fail to activate unity, use this key and activate from https://license.unity3d.com/manual
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -logFile -createManualActivationFile || exit 0
      - run: cat Unity_v2018.3.12f1.alf # file name same as image's version
      # get from UNITY_LICENSE envvar(base64 encoded(cat foo.ulf | base64 )), this file is generated from above manual activation
      - run: echo ${UNITY_LICENSE} | base64 -di  >> .circleci/Unity.ulf
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -manualLicenseFile .circleci/Unity.ulf || exit 0
      # Execute scripts(in Linux, currently does not supported IL2CPP so it run on mono)
      - run:
          name: Export unitypackage
          command: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod PackageExporter.Export
          working_directory: src/MagicOnion.Client.Unity
      - store_artifacts:
          path: src/MagicOnion.Client.Unity/MagicOnion.Client.Unity.unitypackage
          destination: /MagicOnion.Client.Unity.unitypackage
  # .NET Core debug/test, release/push
  build-test:
    executor: dotnet
    steps:
      - checkout
      - run: dotnet build ./src/MagicOnion/ -c Debug
      - run: dotnet build ./src/MagicOnion.Hosting/ -c Debug
      - run: dotnet build ./src/MagicOnion.HttpGateway/ -c Debug
      - run: dotnet build ./src/MagicOnion.Redis/ -c Debug
      - run: dotnet build ./src/MagicOnion.UniversalCodeGenerator/ -c Debug
      - run: dotnet build ./src/MagicOnion.OpenTelemetry/ -c Debug
      - run: dotnet test ./tests/MagicOnion.NetCoreTests/ -c Debug
      - run: dotnet test ./tests/MagicOnion.Hosting.Tests/ -c Debug
  build-push:
    executor: dotnet
    steps:
      - checkout
      # build .NET Core projects
      - run: dotnet build ./src/MagicOnion/ -c Release -p:Version=${CIRCLE_TAG}
      - run: dotnet build ./src/MagicOnion.Hosting/ -c Release -p:Version=${CIRCLE_TAG}
      - run: dotnet build ./src/MagicOnion.HttpGateway/ -c Release -p:Version=${CIRCLE_TAG}
      - run: dotnet build ./src/MagicOnion.Redis/ -c Release -p:Version=${CIRCLE_TAG}
      - run: dotnet build ./src/MagicOnion.OpenTelemetry/ -c Release -p:Version=${CIRCLE_TAG}
      # tests
      # - run: dotnet test ./tests/MagicOnion.NetCoreTests/ -c Release
      # - run: dotnet test ./tests/MagicOnion.Hosting.Tests/ -c Release
      # pack nuget
      - run: dotnet pack ./src/MagicOnion/MagicOnion.csproj -c Release --no-build -p:Version=${CIRCLE_TAG}
      - run: dotnet pack ./src/MagicOnion.Hosting/MagicOnion.Hosting.csproj -c Release --no-build -p:Version=${CIRCLE_TAG}
      - run: dotnet pack ./src/MagicOnion.HttpGateway/MagicOnion.HttpGateway.csproj -c Release --no-build -p:Version=${CIRCLE_TAG}
      - run: dotnet pack ./src/MagicOnion.Redis/MagicOnion.Redis.csproj -c Release --no-build -p:Version=${CIRCLE_TAG}
      - run: dotnet pack ./src/MagicOnion.OpenTelemetry/MagicOnion.OpenTelemetry.csproj -c Release --no-build -p:Version=${CIRCLE_TAG}
      # publish moc
      - run: dotnet publish ./src/MagicOnion.UniversalCodeGenerator/ -c Release --self-contained -r win-x64 -o ./bin/moc/win-x64
      - run: dotnet publish ./src/MagicOnion.UniversalCodeGenerator/ -c Release --self-contained -r linux-x64 -o ./bin/moc/linux-x64
      - run: dotnet publish ./src/MagicOnion.UniversalCodeGenerator/ -c Release --self-contained -r osx-x64 -o ./bin/moc/osx-x64
      - run: apt update && apt install zip -y
      - run: zip -r moc.zip ./src/MagicOnion.UniversalCodeGenerator/bin/moc
      - store_artifacts:
          path: moc.zip
          destination: moc.zip
      # push to NuGet Server
      - run: dotnet nuget push ./src/MagicOnion/bin/Release/MagicOnion.${CIRCLE_TAG}.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MagicOnion.Hosting/bin/Release/MagicOnion.Hosting.${CIRCLE_TAG}.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MagicOnion.HttpGateway/bin/Release/MagicOnion.HttpGateway.${CIRCLE_TAG}.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MagicOnion.Redis/bin/Release/MagicOnion.Redis.${CIRCLE_TAG}.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MagicOnion.OpenTelemetry/bin/Release/MagicOnion.OpenTelemetry.${CIRCLE_TAG}.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
  build-unity-chatapp-android:
    executor: macos
    steps:
      - checkout
      - run: gem install u3d
      - run: u3d install 2018.4.5f1 --packages Unity,Android
      - run: cat Unity_2018.4.5f1-android.alf
      - run: echo ${UNITY_LICENSE} | base64 -di  >> .circleci/Unity.ulf
      - run: u3d run -- -batchmode --quit -nographics -silent-crashes -logFile - -manualLicenseFile .circleci/Unity.ulf || exit 0
      - run:
          name: build Android
          command: u3d run -- -batchmode --quit -nographics -silent-crashes -logFile - -projectPath . -executeMethod BatchBuild.Build -platform android -locationpath ./build/android
          working_directory: ./samples/ChatApp/ChatApp.Unity
      - store_artifacts:
          path: ./samples/ChatApp/ChatApp.Unity/android
          destination: /chatapp.android
workflows:
  version: 2
  build-and-push:
    jobs:
      # - build-unity:
      #     filters:
      #       tags:
      #         only: /.*/
      # - build-test:
      #     filters:
      #       tags:
      #         only: /.*/
      # - build-push:
      #     filters:
      #       tags:
      #         only: /^\d\.\d\.\d.*/
      #       branches:
      #         ignore: /.*/
      - build-unity-chatapp-android:
          filters:
            tags:
              only: /.*/
